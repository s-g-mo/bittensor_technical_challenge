'''
SCRIPT BT_challenge_TF.py

This script is my TensorFlow implementation of the Bittensor technical 
challenge. It calls several utility functions (contained in the utils_TF.py
file) while executing. The script does the following:

  1) Loads and prepares MNIST image data such that it can be passed into a 
  simple neural network.

  2) Builds and trains the network.

  3) Then examines the effects of pruning the network according to two different
  techniques.

Trained models and figures generated by this script are saved in '../models/'
and '../figures/' directories, which are created upon execution.

Stephen M. January, 2022
'''

#################################### IMPORTS ###################################

# Standard imports
import numpy as np

# Imports the utility functions written for this challenge.
import utils_TF

##################################### MAIN #####################################

# Setup directories to store trained neural networks and figures.
utils_TF.directory_setup()

# Grab and prepare MNIST data so that it can be passed into the network.
X_train, Y_train, X_test, Y_test = utils_TF.grab_and_prep_MNIST()

# Build and compile the network (architecture hard-coded as per the challenge).
network = utils_TF.bittensor_neural_net()

# Train the network for 20 epochs, using batches of 32, and validate with the
# MNIST test data.
history = network.fit(X_train, 
                      Y_train,
                      epochs=20,
                      batch_size=32,
                      validation_data=(X_test, Y_test))

# Save the network to the 'models' directory. Save two copies, one as a backup
# in case I want to play around with the network later.
network.save('../models/NN_TF.h5')
network.save('../models/NN_TF_backup.h5')

# Plot the results of the training process. Save to '../figures/' dir.
utils_TF.plot_training(history)

# Numpy array of k-th percents to loop over for pruning.
k_percents = np.array([0, 25, 50, 60, 70, 80, 90, 95, 97, 99])/100

# Prune trained neural network using weight-pruning and unit-pruning, then
# measure network performance against the test data.
weight_pruning_scores = utils_TF.weight_pruning(k_percents, X_test, Y_test)
unit_pruning_scores = utils_TF.unit_pruning(k_percents, X_test, Y_test)

# Plot network performance vs pruning percentage.
utils_TF.plot_pruning_performance(k_percents,
                                  weight_pruning_scores, 
                                  unit_pruning_scores)